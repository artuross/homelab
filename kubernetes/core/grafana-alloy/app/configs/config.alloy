livedebugging{
    enabled = true
}

logging {
  level  = "info"
  format = "logfmt"
}

discovery.kubernetes "nodes" {
  role = "node"
}

discovery.relabel "nodes_kubelet_cadvisor" {
    targets = discovery.kubernetes.nodes.targets

    rule {
        action = "labelmap"
        regex = "__meta_kubernetes_node_label_(.+)"
    }

    rule {
        target_label = "__address__"
        replacement = "kubernetes.default.svc:443"
    }

    rule {
        source_labels = ["__meta_kubernetes_node_name"]
        regex = "(.+)"
        target_label = "__metrics_path__"
        replacement = "/api/v1/nodes/$1/proxy/metrics/cadvisor"
    }
}

prometheus.scrape "node_kubelet_cadvisor" {
    targets = discovery.relabel.nodes_kubelet_cadvisor.output
    forward_to = [prometheus.relabel.node_cadvisor_metrics_filtered.receiver]

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

    scheme = "https"

    scrape_interval = "60s"

    tls_config {
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
    }
}

prometheus.relabel "node_cadvisor_metrics_filtered" {
  rule {
    action        = "keep"
    source_labels = ["__name__"]
    regex         = "^(container_cpu_usage_seconds_total|container_memory_working_set_bytes|machine_cpu_cores|machine_memory_bytes)$"
  }

  forward_to = [prometheus.remote_write.grafanacloud.receiver]
}

prometheus.remote_write "grafanacloud" {
  endpoint {
    url = env("PROMETHEUS_ENDPOINT") + "/api/prom/push"

    basic_auth {
      username = env("PROMETHEUS_USER")
      password = env("PROMETHEUS_PASSWORD")
    }
  }
}
